
package ch.hearc.meteo.imp.afficheur.real.moo;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

import org.jfree.data.time.Millisecond;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;

import ch.hearc.meteo.spec.com.meteo.listener.event.MeteoEvent;
import ch.hearc.meteo.spec.com.meteo.listener.event.Sources;

public class Manager
	{

	/*------------------------------------------------------------------*\
	|*							Constructeurs							*|
	\*------------------------------------------------------------------*/

	public Manager()
		{
		collectionAltitude = new TimeSeriesCollection();
		collectionPression = new TimeSeriesCollection();
		collectionTemperature = new TimeSeriesCollection();

		mapAltitude = new HashMap<Sources, TimeSeries>();
		mapPression = new HashMap<Sources, TimeSeries>();
		mapTemperature = new HashMap<Sources, TimeSeries>();
		}

	/*------------------------------------------------------------------*\
	|*							Methodes Public							*|
	\*------------------------------------------------------------------*/

	public void printAltitude(MeteoEvent event)
		{
		manage(collectionAltitude, mapAltitude, event);
		}

	public void printPression(MeteoEvent event)
		{
		manage(collectionPression, mapPression, event);
		}

	public void printTemperature(MeteoEvent event)
		{
		manage(collectionTemperature, mapTemperature, event);
		}

	/*------------------------------*\
	|*				Set				*|
	\*------------------------------*/

	/*------------------------------*\
	|*				Get				*|
	\*------------------------------*/

	public Set<Sources> getSourcesList()
		{
		return mapTemperature.keySet();
		}

	public TimeSeriesCollection getCollectionAltitude()
		{
		return this.collectionAltitude;
		}

	public TimeSeriesCollection getCollectionPression()
		{
		return this.collectionPression;
		}

	public TimeSeriesCollection getCollectionTemperature()
		{
		return this.collectionTemperature;
		}

	/*------------------------------------------------------------------*\
	|*							Methodes Private						*|
	\*------------------------------------------------------------------*/

	private void manage(TimeSeriesCollection collection, Map<Sources, TimeSeries> map, MeteoEvent event)
		{
		// Create Key if it didn't exist
		if (!map.containsKey(event.getSource()))
			{
			Sources yolo = new Sources("YOLO");
			Sources yolo1 = new Sources("YOLO1");
			Sources yolo2 = new Sources("YOLO1");
			map.put(event.getSource(), new TimeSeries(event.getSource().toString()));
			map.put(yolo, new TimeSeries("Yolo serie"));
			map.put(yolo1, new TimeSeries("Yolo serie 1"));
			map.put(yolo2, new TimeSeries("Yolo serie 2"));
			collection.addSeries(map.get(event.getSource()));
			collection.addSeries(map.get(yolo));
			collection.addSeries(map.get(yolo1));
			collection.addSeries(map.get(yolo2));
			}

		// Add the event value
		TimeSeries sourceSeries = map.get(event.getSource());
		RegularTimePeriod time = new Millisecond(new Date(event.getTime()));
		sourceSeries.add(time, event.getValue());

		}

	/*------------------------------------------------------------------*\
	|*							Attributs Private						*|
	\*------------------------------------------------------------------*/

	// Tools
	private TimeSeriesCollection collectionAltitude;
	private TimeSeriesCollection collectionPression;
	private TimeSeriesCollection collectionTemperature;
	private Map<Sources, TimeSeries> mapAltitude;
	private Map<Sources, TimeSeries> mapPression;
	private Map<Sources, TimeSeries> mapTemperature;

	}
